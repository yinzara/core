import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable QFlow.Core 1.0'

Module {
    dependencies: []
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QFlow::Canvas"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["QFlow.Core/VirtualCanvas 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Signal { name: "completed" }
    }
    Component {
        name: "QFlow::Connection"
        prototype: "QObject"
        exports: ["QFlow.Core/Connection 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QObject"; isPointer: true }
        Property { name: "destination"; type: "QObject"; isPointer: true }
        Property { name: "live"; type: "bool" }
        Signal {
            name: "liveChanged"
            Parameter { name: "value"; type: "bool" }
        }
    }
    Component {
        name: "QFlow::ErrorInfo"
        exports: ["QFlow.Core/ErrorInfo 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "errorText"; type: "string" }
        Property { name: "errorCode"; type: "int" }
    }
    Component {
        name: "QFlow::FileInfo"
        exports: ["QFlow.Core/FileInfo 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method { name: "absoluteFilePath"; type: "string" }
        Method { name: "fileName"; type: "string" }
        Method { name: "isDir"; type: "bool" }
        Method { name: "absolutePath"; type: "string" }
        Method { name: "baseName"; type: "string" }
        Method {
            name: "relativeFilePath"
            type: "string"
            Parameter { name: "dir"; type: "string" }
        }
        Method { name: "exists"; type: "bool" }
    }
    Component {
        name: "QFlow::Future"
        exports: ["QFlow.Core/Future 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method { name: "wait" }
        Method { name: "get"; type: "QVariant" }
    }
    Component {
        name: "QFlow::HelperFunctions"
        prototype: "QObject"
        exports: ["QFlow.Core/Helper 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "isError"
            type: "bool"
            Parameter { name: "info"; type: "ErrorInfo" }
        }
        Method {
            name: "errorText"
            type: "string"
            Parameter { name: "info"; type: "ErrorInfo" }
        }
        Method {
            name: "timespan"
            type: "Timespan"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "rational"
            type: "Rational"
            Parameter { name: "p"; type: "int" }
            Parameter { name: "q"; type: "int" }
        }
        Method {
            name: "rational"
            type: "Rational"
            Parameter { name: "str"; type: "string" }
        }
        Method {
            name: "intRange"
            type: "IntRange"
            Parameter { name: "low"; type: "int" }
            Parameter { name: "high"; type: "int" }
        }
        Method { name: "localHostName"; type: "string" }
        Method {
            name: "copy"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "newName"; type: "string" }
        }
        Method {
            name: "mkdir"
            type: "bool"
            Parameter { name: "dirName"; type: "string" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "getFileList"
            type: "QVariantList"
            Parameter { name: "dir"; type: "string" }
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "getFileListRecursive"
            type: "QVariantList"
            Parameter { name: "dir"; type: "string" }
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "getFileInfo"
            type: "FileInfo"
            Parameter { name: "str"; type: "string" }
        }
        Method { name: "currentDir"; type: "string" }
        Method {
            name: "newTimespan"
            type: "Timespan"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "sleepSecs"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "sleepMSecs"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "getenv"
            type: "QByteArray"
            Parameter { name: "varname"; type: "string" }
        }
        Method {
            name: "startExternalProgram"
            Parameter { name: "cmd"; type: "string" }
        }
    }
    Component {
        name: "QFlow::Rational"
        exports: ["QFlow.Core/Rational 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "numerator"; type: "int"; isReadonly: true }
        Property { name: "denominator"; type: "int"; isReadonly: true }
    }
    Component {
        name: "QFlow::Scheduler"
        prototype: "QObject"
        exports: ["QFlow.Core/Scheduler 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "startTime"; type: "QDateTime" }
        Property { name: "duration"; type: "Timespan" }
        Signal { name: "started" }
        Signal { name: "finished" }
    }
    Component {
        name: "QFlow::SignalSlotConnection"
        prototype: "QFlow::Connection"
        exports: ["QFlow.Core/SignalSlotConnection 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ConnectionType"
            values: {
                "Auto": 0,
                "Queued": 2,
                "Direct": 1,
                "BlockingQueued": 3
            }
        }
        Property { name: "signal"; type: "string" }
        Property { name: "slot"; type: "string" }
        Property { name: "connectionType"; type: "ConnectionType" }
    }
    Component {
        name: "QFlow::SmartConnection"
        prototype: "QFlow::SignalSlotConnection"
        exports: ["QFlow.Core/SmartConnection 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QFlow::SortFilterProxyModel"
        prototype: "QSortFilterProxyModel"
        exports: ["QFlow.Core/SortFilterProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "pattern"; type: "string" }
        Signal {
            name: "expanded"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method { name: "pattern"; type: "string" }
        Method {
            name: "setPattern"
            Parameter { name: "value"; type: "string" }
        }
    }
    Component {
        name: "QFlow::Thread"
        defaultProperty: "elements"
        prototype: "QObject"
        exports: ["QFlow.Core/Thread 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "elements"; type: "QObject"; isList: true; isReadonly: true }
        Method { name: "test" }
    }
    Component {
        name: "QFlow::Timespan"
        exports: ["QFlow.Core/Timespan 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "days"; type: "qulonglong"; isReadonly: true }
        Property { name: "hours"; type: "qulonglong"; isReadonly: true }
        Property { name: "minutes"; type: "qulonglong"; isReadonly: true }
        Property { name: "seconds"; type: "qulonglong"; isReadonly: true }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Property { name: "recursiveFilteringEnabled"; type: "bool" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "SystemInfo"
        prototype: "QObject"
        exports: ["QFlow.Core/SystemInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "totalMem"; type: "qulonglong"; isReadonly: true }
        Property { name: "freeMem"; type: "qulonglong"; isReadonly: true }
        Property { name: "threadCount"; type: "int"; isReadonly: true }
        Method { name: "getCpuUsage"; type: "double" }
        Method { name: "getTotalMem"; type: "qulonglong" }
        Method { name: "getFreeMem"; type: "qulonglong" }
        Method { name: "getThreadCount"; type: "int" }
    }
}
